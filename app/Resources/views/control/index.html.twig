{% extends 'control/layout.html.twig' %}

{% block body %}
    {{ source('control/vue/app-seasons.vue.twig') }}
{% endblock %}
{% block ccs %}
	{{ parent() }}
	<link href="{{ asset('backend/css/dropzone.css') }}" rel="stylesheet">
{% endblock %}
{% block javascripts %}
    {{ parent() }}
	<script src="{{ asset('backend/js/dropzone.js') }}"></script>
    <script>

		Vue.component('seasonModalContent', {
			template: '{{ source('control/vue/season-modal.vue.twig')|escape('js') }}',
			data: function () {
				return {
					year: (new Date()).getFullYear(),
					error: null
				}
			},
			computed:{
				years: function () {
					return (this.year - 1) + '/' + (this.year)
				}
			},
			methods: {
				incYear: function (data) {
					this.year++;
				},
				decYear: function () {
					this.year--;
				},
				save: function () {
					var $this = this;
					$.ajax({
						url: '/control/seasons/new',
						data: {year: $this.year},
						type: 'post',
						success: function (response) {
							$this.$emit('bus', {name: 'new-season', value: response});
						},
						error: function (jqXHR) {
							$this.error = jqXHR.responseJSON.error ? jqXHR.responseJSON.error : 'Ошибка сервера';
						}
					});
				}
			}
		});

		Vue.component('seasonTeamModalContent', {
			template: '{{ source('control/vue/season-team-modal.vue.twig')|escape('js') }}',
			props: ['props'],
			data: function () {
				return {
					error: null,
					id: null,
					team: null,
					coach: null,
					season: null,
					league: null
				}
			},
			computed:{
				isNew: function () {
					if (!this.id) {
						return true;
					}
					return false;
				}
			},
			methods: {
				uploadAvatar: function () {
					var $this = this;
					var files = this.$refs.avatarFiles.files;
					var formData = new FormData();

					formData.append("file", files[0]);
					var request = new XMLHttpRequest();
					request.onreadystatechange = function() {//Call a function when the state changes.
						if(request.readyState == 4 && request.status == 200) {
							$this.changeAvatar(JSON.parse(request.responseText));
						}
					};
					request.open("POST", "/control/avatar/upload");
					request.send(formData);
				},
				changeAvatar: function (url) {
					console.log(url);
					if (!this.team) {
						this.team = {};
					}
					if (!this.team.metadata) {
						this.team.metadata = {};
					}
					this.team.metadata.image = url;
				},
				updateTeamInfo: function (team) {
					this.team = team;
				},
				updateCoach: function (coach) {
					this.coach = coach;
				},
				updateLeague: function (league) {
					this.league = league;
				},
				save: function () {
					var $this = this;

					$.ajax({
						url: '/control/seasonteam/save',
						data: {seasonteam: {id: $this.id, team: $this.team, coach: $this.coach, league: $this.league, season: $this.season}},
						type: 'post',
						success: function (response) {
							console.log(response);
							$this.$emit('bus', {name: 'seasonteam-changed', value: response});
						},
						error: function (jqXHR) {
							$this.error = 'Ошибка сервера';
						}
					});
				},
				init: function (data) {
					var $this = this;
					if (!data) {
						data = this.props;
					}
					if (data) {
						$this.id = data.seasonTeam.id;
						$this.team = data.seasonTeam.team;
						$this.coach = data.seasonTeam.coach;
						$this.season = data.season;
						$this.league = data.seasonTeam.league;
					}

					$('#team-select').editable({
						mode: 'inline',
						unsavedclass: '',
						showbuttons: false,
						value: '',
						typeahead: {
							autoSelect: false,
							source: function (query, process) {
								$.ajax({
									url: '/control/typeahead?team=' + query,
									success: function (response) {
										process(response);
									}
								});
							},
							onSelect: function (item) {
								$this.updateTeamInfo(item.team);
							}
						},
						display: function (value) {
							if (value !== '' && (!$this.team || $this.team.metadata.title !== value)) {
								$this.updateTeamInfo({metadata: {title: value}});
							}
						},
						title: 'Выберите команду'
					});
					if ($this.id) {
						$('#team-select').editable('disable');
					} else {
						$('#team-select').editable('enable');
					}


					$('#coach-select').editable({
						mode: 'inline',
						unsavedclass: '',
						showbuttons: false,
						value: '',
						typeahead: {
							autoSelect: false,
							source: function (query, process) {
								$.ajax({
									url: '/control/typeahead?coach=' + query,
									success: function (response) {
										process(response);
									}
								});
							},
							onSelect: function (item) {
								$this.updateCoach(item.coach);
							}
						},
						display: function () {
							return;
						},
						title: 'Выберите тренера'
					});

					$('#league-select').editable({
						mode: 'inline',
						unsavedclass: '',
						showbuttons: false,
						value: '',
						typeahead: {
							autoSelect: false,
							source: function (query, process) {
								$.ajax({
									url: '/control/typeahead?league=' + query,
									success: function (response) {
										process(response);
									}
								});
							},
							onSelect: function (item) {
								$this.updateLeague(item.league);
							}
						},
						display: function (value) {
							if (value !== '' && (!$this.league || $this.league.metadata.title !== value)) {
								$this.updateLeague({metadata: {title: value}});
							}
						},
						title: 'Выберите лигу'
					});
				}
			},
			mounted: function () {
				this.init();
			}
		});

		Vue.component('modal', {
			template: '{{ source('control/vue/modal-layout.vue.twig')|escape('js') }}',
			data: function () {
				return {
					content: null,
					data: {}
				}
			},
			methods: {
				show: function (template, data) {
					this.content = template;
					this.data = data;
					if (this.$refs.content && this.$refs.content.init) {
						this.$refs.content.init(data);
					}
					$('#modal').modal('show');
				},
				hide: function () {
					$('#modal').modal('hide');
				},
				handle: function (data) {
					this.$emit('bus', data);
				}
			}
		});

		Vue.component('season', {
			template: '{{ source('control/vue/season.vue.twig')|escape('js') }}',
			props: ['season', 'currentSeasonId', 'seasonteams'],
			data: function () {
				return {

				}
			},
			methods: {
				markCurrent: function () {
					var $this = this;
					$.ajax({
						url: '/control/seasons/current',
						type: 'post',
						data: {id: $this.season.id},
						success: function (response) {
							$this.$emit('bus', {name: 'current-season-update', value: $this.season.id});
						},
						complete: function (response) {

						}
					});
				},
				showTeamSeasonPopup: function (event, seasonTeam) {
					if (!seasonTeam) {
						seasonTeam = {};
					}
					this.$emit('bus', {name: 'show-team-season-popup', value: {season: this.season, seasonTeam: seasonTeam}});
				}
			}
		});

		var app = new Vue({
			el: '#app',
			data: {
				currentSeasonId: 0,
				seasons: [],
				seasonteams: [],
				teams: [],
				leagues: []
			},
			computed: {
				sortedSeasons: function () {
					return this.seasons.sort(function(a, b) {
						return parseInt(b.year) - parseInt(a.year);
					});
				}
			},
			methods: {
				getSeasonTeams: function (season) {
					var seasonteams = [];
					for (var i in this.seasonteams) {
						if (this.seasonteams[i] && this.seasonteams[i].season.id === season.id) {
							seasonteams.push(this.seasonteams[i]);
						}
					}
					return seasonteams;
				},
				showAddSeasonPopup: function () {
					this.$refs.modal.show('seasonModalContent');
				},
				showAddSeasonTeamPopup: function (data) {
					this.$refs.modal.show('seasonTeamModalContent', data);
				},
				load: function () {
					const $this = this;
					$.ajax({
						url: '/control/seasons',
						type: 'get',
						success: function (response) {
							$this.seasons = response.seasons;
							$this.seasonteams = response.seasonteams;
							$this.currentSeasonId = response.currentSeasonId;
						},
						complete: function (response) {

						}
					});
				},
				handle: function (data) {
					this.$emit(data.name, data.value);
				}
			},
			created: function () {
				this.$on('current-season-update', function (id) {
					this.currentSeasonId = id;
				});
				this.$on('new-season', function (season) {
					this.seasons.push(season);
					this.$refs.modal.hide();
				});
				this.$on('seasonteam-changed', function (seasonteam) {
					console.log(seasonteam, this.seasonteams);
					var exist = false;
					for (index in this.seasonteams) {
						if (this.seasonteams[index] && this.seasonteams[index].id == seasonteam.id) {
							this.seasonteams[index] = seasonteam;
							exist = true;
							break;
						}
					}
					if (!exist) {
						this.seasonteams.push(seasonteam);
					}
					this.$refs.modal.hide();
				});
				this.$on('show-team-season-popup', function (data) {
					this.showAddSeasonTeamPopup(data);
				});
			},
			mounted: function () {
				this.load();
			}
		});
    </script>
{% endblock %}