{% extends 'control/layout.html.twig' %}

{% block body %}
    {{ source('control/vue/app-seasons.vue.twig') }}
{% endblock %}
{% block ccs %}
	{{ parent() }}
	<link href="{{ asset('backend/css/dropzone.css') }}" rel="stylesheet">
{% endblock %}
{% block javascripts %}
    {{ parent() }}
	<script src="{{ asset('backend/js/dropzone.js') }}"></script>
    <script>

		Vue.component('member', {
			template: '{{ source('control/vue/member.vue.twig')|escape('js') }}',
			props: ['member'],
			data: function () {
				return {

				}
			},
			computed: {
				idSelector: function () {
					return 'member-select-' + this.member.id;
				}
			},
			methods: {
				remove: function () {
					this.$emit('season-team-modal-bus', {name: 'member-remove', value: this.member});
				},
				onCaptainClick: function () {
					if (this.member.type === 'captain') {
						this.makeDefault()
					} else {
						this.$emit('season-team-modal-bus', {name: 'member-captain', value: this.member});
					}
				},
				onAssistantClick: function () {
					if (this.member.type === 'assistant') {
						this.makeDefault()
					} else {
						this.$emit('season-team-modal-bus', {name: 'member-assistant', value: this.member});
					}
				},
				makeDefault: function () {
					this.$emit('season-team-modal-bus', {name: 'member-default', value: this.member});
				}
			},
			mounted: function () {
				var _this = this;
				$('#' + _this.idSelector).editable({
					mode: 'inline',
					unsavedclass: '',
					showbuttons: false,
					value: '',
					typeahead: {
						autoSelect: false,
						source: function (query, process) {
							$.ajax({
								url: '/control/typeahead?player=' + query,
								success: function (response) {
									process(response);
								}
							});
						},
						onSelect: function (item) {
							_this.member.player = item.player;
						}
					},
					display: function () {
						return;
					},
					title: 'Выберите игрока'
				});
			}
		});

		Vue.component('seasonModalContent', {
			template: '{{ source('control/vue/season-modal.vue.twig')|escape('js') }}',
			data: function () {
				return {
					year: (new Date()).getFullYear(),
					error: null,
					seasonToCopy: null,
					saveInProgress: false,
				}
			},
			computed:{
				years: function () {
					return (this.year - 1) + '/' + (this.year)
				}
			},
			methods: {
				incYear: function (data) {
					this.year++;
				},
				decYear: function () {
					this.year--;
				},
				save: function () {
					var $this = this;
					$this.saveInProgress = true;
					$.ajax({
						url: '/control/seasons/new',
						data: {year: $this.year, copy_season_id: $this.seasonToCopy},
						type: 'post',
						success: function (response) {
							$this.$emit('bus', {name: 'new-season', value: response});
						},
						error: function (jqXHR) {
							$this.error = jqXHR.responseJSON.error ? jqXHR.responseJSON.error : 'Ошибка сервера';
						},
						complete: function () {
							$this.saveInProgress = false;
						}
					});
				},
				init: function (season) {
					this.seasonToCopy = season ? season.id : undefined;
				}
			},
			mounted: function () {
				this.init(this.$parent.data);
			}
		});

		Vue.component('seasonTeamModalContent', {
			template: '{{ source('control/vue/season-team-modal.vue.twig')|escape('js') }}',
			props: ['props'],
			data: function () {
				return {
					error: null,
					id: null,
					team: null,
					coach: null,
					season: null,
					league: null,
					members: [],
					last_member_id: -1,
					saveInProgress: false
				}
			},
			computed:{
				isNew: function () {
					if (!this.id) {
						return true;
					}
					return false;
				},
				saveData: function () {

					var
						_this = this,
						members = [];
					for (i in _this.members) {
						if (!_this.members[i].player) {
							continue;
						}
						members.push({
							player_id: _this.members[i].player.id,
							type: _this.members[i].type,
						});
					}
					return {
						seasonteam: {
							id: _this.id,
							team: _this.team,
							coach: _this.coach,
							league: _this.league,
							season: _this.season,
							members: members
						}
					};
				}
			},
			created: function () {
				this.$on('member-default', function (member) {
					for (i in this.members) {
						if (this.members[i].id === member.id) {
							this.members[i].type = 'default';
						}
					}
				});
				this.$on('member-captain', function (member) {
					for (i in this.members) {
						if (this.members[i].type === 'captain') {
							this.members[i].type = 'default';
						}
						if (this.members[i].id === member.id) {
							this.members[i].type = 'captain';
						}
					}
				});
				this.$on('member-assistant', function (member) {
					var assistantCount = 0;
					for (i in this.members) {
						if (this.members[i].type === 'assistant') {
							assistantCount++;
							if (assistantCount >= 3) {
								this.members[i].type = 'default';
							}
						}
						if (this.members[i].id === member.id) {
							this.members[i].type = 'assistant';
						}
					}
				});
				this.$on('member-remove', function (member) {
					this.members = this.members.filter(function (v) {
						return member.id != v.id;
					});
				});
				this.$on('member-add', function (member) {
					this.members.push({
						id: this.last_member_id,
						player: null,
						type: 'default'
					});
					this.last_member_id -= 1;
				});
			},
			methods: {
				handle: function (data) {
					this.$emit(data.name, data.value);
				},
				addMember: function () {
					this.$emit('member-add', {});
				},
				uploadAvatar: function () {
					var $this = this;
					var files = this.$refs.avatarFiles.files;
					var formData = new FormData();

					formData.append("file", files[0]);
					var request = new XMLHttpRequest();
					request.onreadystatechange = function() {//Call a function when the state changes.
						if(request.readyState == 4 && request.status == 200) {
							$this.changeAvatar(JSON.parse(request.responseText));
						}
					};
					request.open("POST", "/control/avatar/upload");
					request.send(formData);
				},
				changeAvatar: function (url) {
					if (!this.team) {
						this.team = {};
					}
					if (!this.team.metadata) {
						this.team.metadata = {};
					}
					this.team.metadata.image = url;
					this.$forceUpdate();
				},
				updateTeamInfo: function (team) {
					this.team = team;
				},
				updateCoach: function (coach) {
					this.coach = coach;
				},
				updateLeague: function (league) {
					this.league = league;
				},
				save: function () {
					var $this = this;
					$this.saveInProgress = true;
					$.ajax({
						url: '/control/seasonteam/save',
						data: $this.saveData,
						type: 'post',
						success: function (response) {
							console.log(response);
							$this.$emit('bus', {name: 'seasonteam-changed', value: response});
						},
						error: function (jqXHR) {
							$this.error = 'Ошибка сервера';
						},
						complete: function () {
							$this.saveInProgress = false;
						}
					});
				},
				loadMembers: function () {
					var _this = this;
					$.ajax({
						url: '/control/seasonteam/members/' + _this.id,
						type: 'get',
						success: function (response) {
							_this.members = response;
						},
						error: function (jqXHR) {
							_this.error = 'Ошибка сервера';
						}
					});
				},
				init: function (data) {
					var $this = this;
					if (!data) {
						data = $this.props;
					}
					$this.members = [];
					if (data) {
						$this.id = data.seasonTeam.id;
						$this.team = data.seasonTeam.team;
						$this.coach = data.seasonTeam.coach;
						$this.season = data.season;
						$this.league = data.seasonTeam.league;
						$this.id && $this.loadMembers();
					}

					$('#team-select').editable({
						mode: 'inline',
						unsavedclass: '',
						showbuttons: false,
						value: '',
						typeahead: {
							autoSelect: false,
							source: function (query, process) {
								$.ajax({
									url: '/control/typeahead?team=' + query,
									success: function (response) {
										process(response);
									}
								});
							},
							onSelect: function (item) {
								$this.updateTeamInfo(item.team);
							}
						},
						display: function (value) {
							if (value !== '' && (!$this.team || $this.team.metadata.title !== value)) {
								$this.updateTeamInfo({metadata: {title: value}});
							}
						},
						title: 'Выберите команду'
					});
					if ($this.id) {
						$('#team-select').editable('disable');
					} else {
						$('#team-select').editable('enable');
					}


					$('#coach-select').editable({
						mode: 'inline',
						unsavedclass: '',
						showbuttons: false,
						value: '',
						typeahead: {
							autoSelect: false,
							source: function (query, process) {
								$.ajax({
									url: '/control/typeahead?coach=' + query,
									success: function (response) {
										process(response);
									}
								});
							},
							onSelect: function (item) {
								$this.updateCoach(item.coach);
							}
						},
						display: function () {
							return;
						},
						title: 'Выберите тренера'
					});

					$('#league-select').editable({
						mode: 'inline',
						unsavedclass: '',
						showbuttons: false,
						value: '',
						typeahead: {
							autoSelect: false,
							source: function (query, process) {
								$.ajax({
									url: '/control/typeahead?league=' + query,
									success: function (response) {
										process(response);
									}
								});
							},
							onSelect: function (item) {
								$this.updateLeague(item.league);
							}
						},
						display: function (value) {
							if (value !== '' && (!$this.league || $this.league.metadata.title !== value)) {
								$this.updateLeague({metadata: {title: value}});
							}
						},
						title: 'Выберите лигу'
					});
				}
			},
			mounted: function () {
				this.init();
			}
		});

		Vue.component('modal', {
			template: '{{ source('control/vue/modal-layout.vue.twig')|escape('js') }}',
			data: function () {
				return {
					size: '',
					content: null,
					data: {}
				}
			},
			computed: {
				modalClass: function () {
					return 'modal-dialog ' + this.size
				}
			},
			methods: {
				show: function (template, data, size) {
					this.content = template;
					this.data = data;
					this.size = !!size ? size : '';
					if (this.$refs.content && this.$refs.content.init) {
						this.$refs.content.init(data);
					}
					$('#modal').modal('show');
				},
				hide: function () {
					$('#modal').modal('hide');
				},
				handle: function (data) {
					this.$emit('bus', data);
				}
			}
		});

		Vue.component('season', {
			template: '{{ source('control/vue/season.vue.twig')|escape('js') }}',
			props: ['season', 'currentSeasonId', 'seasonteams'],
			data: function () {
				return {
					deleteInProgress: false
				}
			},
			methods: {
				markCurrent: function () {
					var $this = this;
					$.ajax({
						url: '/control/seasons/current',
						type: 'post',
						data: {id: $this.season.id},
						success: function (response) {
							$this.$emit('bus', {name: 'current-season-update', value: $this.season.id});
						},
						complete: function (response) {

						}
					});
				},
				showTeamSeasonPopup: function (event, seasonTeam) {
					if (!seasonTeam) {
						seasonTeam = {};
					}
					this.$emit('bus', {name: 'show-team-season-popup', value: {season: this.season, seasonTeam: seasonTeam}});
				},
				showCopySeasonPopup: function (season) {
					this.$emit('bus', {name: 'show-copy-season-popup', value: this.season});
				},
				removeSeason: function () {
					var $this = this;
					$this.deleteInProgress = true;
					$.ajax({
						url: '/control/season/delete/' + $this.season.id,
						type: 'get',
						success: function (response) {
							$this.$emit('bus', {name: 'season-deleted', value: $this.season});
						},
						error: function (jqXHR) {
						},
						complete: function () {
							$this.deleteInProgress = false;
						}
					});
				},
				remove: function (seasonTeam) {
					var $this = this;
					$this.deleteInProgress = true;
					$.ajax({
						url: '/control/seasonteam/delete/' + seasonTeam.id,
						type: 'get',
						success: function (response) {
							$this.$emit('bus', {name: 'seasonteam-deleted', value: seasonTeam});
						},
						error: function (jqXHR) {
						},
						complete: function () {
							$this.deleteInProgress = false;
						}
					});
				}
			}
		});

		var app = new Vue({
			el: '#app',
			data: {
				currentSeasonId: 0,
				seasons: [],
				seasonteams: [],
				teams: [],
				leagues: []
			},
			computed: {
				sortedSeasons: function () {
					return this.seasons.sort(function(a, b) {
						return parseInt(b.year) - parseInt(a.year);
					});
				}
			},
			methods: {
				getSeasonTeams: function (season) {
					var seasonteams = [];
					for (var i in this.seasonteams) {
						if (this.seasonteams[i] && this.seasonteams[i].season.id === season.id) {
							seasonteams.push(this.seasonteams[i]);
						}
					}
					return seasonteams;
				},
				showAddSeasonPopup: function (season) {
					this.$refs.modal.show('seasonModalContent', season);
				},
				showAddSeasonTeamPopup: function (data) {
					this.$refs.modal.show('seasonTeamModalContent', data, 'modal-lg');
				},
				load: function () {
					const $this = this;
					$.ajax({
						url: '/control/seasons',
						type: 'get',
						success: function (response) {
							$this.seasons = response.seasons;
							$this.seasonteams = response.seasonteams;
							$this.currentSeasonId = response.currentSeasonId;
						},
						complete: function (response) {

						}
					});
				},
				handle: function (data) {
					this.$emit(data.name, data.value);
				}
			},
			created: function () {
				this.$on('season-deleted', function (season) {
					this.seasons = this.seasons.filter(function (st) {
						return st && st.id !== season.id;
					})
				});
				this.$on('seasonteam-deleted', function (seasonteam) {
					this.seasonteams = this.seasonteams.filter(function (st) {
						return st && st.id !== seasonteam.id;
					})
				});
				this.$on('current-season-update', function (id) {
					this.currentSeasonId = id;
				});
				this.$on('new-season', function (data) {
					this.seasons.push(data.season);
					for (i in data.seasonteams) {
						this.$emit('seasonteam-changed', data.seasonteams[i]);
					}
					this.$refs.modal.hide();
				});
				this.$on('seasonteam-changed', function (seasonteam) {
					var exist = false;
					for (index in this.seasonteams) {
						if (this.seasonteams[index] && this.seasonteams[index].id == seasonteam.id) {
							this.seasonteams[index] = seasonteam;
							exist = true;
							break;
						}
					}
					if (!exist) {
						this.seasonteams.push(seasonteam);
					}
					this.$refs.modal.hide();
					this.$forceUpdate();
				});
				this.$on('show-team-season-popup', function (data) {
					this.showAddSeasonTeamPopup(data);
				});
				this.$on('show-copy-season-popup', function (data) {
					this.showAddSeasonPopup(data);
				});
			},
			mounted: function () {
				this.load();
			}
		});
    </script>
{% endblock %}