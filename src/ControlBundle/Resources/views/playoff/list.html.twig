{% extends 'ControlBundle::layout.html.twig' %}

{% block body %}
    <div class="container" id="app" xmlns:v-on="http://www.w3.org/1999/xhtml">
        <div class="row mb-10">
            <div class="col-md-12">
                <button v-on:click="showAddPlayoffPopup" class="btn btn-primary">Добавить</button>
            </div>
        </div>
        <div class="row">
            <div v-for="playoff in playoffs" class="col-xs-12 col-sm-12 col-md-12">
				<playoff @bus="handle" :playoff="playoff" :items="getPlayoffItems(playoff)" :games="getPlayoffGames(playoff)"></playoff>
            </div>
        </div>
        <modal ref="modal" @bus="handle"></modal>
    </div>
{% endblock %}

{% block css %}
    {{ parent() }}
	<link href="{{ asset('backend/css/bootstrap-datetimepicker.min.css') }}" rel="stylesheet">
	<link href="{{ asset('backend/css/bootstrap-select.min.css') }}" rel="stylesheet">
	<link href="{{ asset('backend/css/ajax-bootstrap-select.min.css') }}" rel="stylesheet">

{% endblock %}

{% block javascripts %}
    {{ parent() }}
	<script src="{{ asset('backend/js/moment-with-locales.js') }}"></script>
	<script src="{{ asset('backend/js/bootstrap-datetimepicker.min.js') }}"></script>
	<script src="{{ asset('backend/js/bootstrap-select.min.js') }}"></script>
	<script src="{{ asset('backend/js/ajax-bootstrap-select.min.js') }}"></script>
    {{ include('@Control/playoff/vue/playoff.html.twig') }}
    {{ include('@Control/playoff/vue/playoff-modal.vue.twig') }}
    {{ include('@Control/playoff/vue/playoff-item-modal.vue.twig') }}
    {{ include('@Control/vue/modal-layout.vue.twig') }}
    {{ include('@Control/vue/edit-modal.vue.twig') }}
    {{ include('@Control/vue/member.vue.twig') }}
    {{ include('@Control/games/vue/event.vue.twig') }}
    {{ include('@Control/games/vue/member-list.vue.twig') }}
    {{ include('@Control/games/vue/game-modal.vue.twig') }}
    <script>
		var app = new Vue({
			el: '#app',
			data: {
				playoffs: [],
				playoffsItems: [],
				playoffsGames: []
			},
			computed: {

			},
			methods: {
				getPlayoffItems: function (playoff) {
					return this.playoffsItems.filter(function (t) {
						return playoff.id == t.playoff.id;
					})
				},
				getPlayoffGames: function (playoff) {
					const items = this.getPlayoffItems(playoff);
					var games = [];
					var itemIds = [];
					for (index in items) {
						itemIds.push(items[index].id);
					}
					for (index in this.playoffsGames) {
						if (itemIds.indexOf(this.playoffsGames[index].playoff_item.id)) {
							games.push(this.playoffsGames[index]);
						}
					}
					return games;
				},
				setPlayoffs: function (playoffs) {
					this.playoffs = playoffs.filter(function (t) {
						return !!t;
					})
				},
				setPlayoffsItems: function (items) {
					this.playoffsItems = items.filter(function (t) {
						return !!t;
					})
				},
				setPlayoffsGames: function (games) {
					this.playoffsGames = games.filter(function (t) {
						return !!t;
					})
				},
				load: function () {
					const _this = this;
					$.ajax({
						url: '/control/playoff',
						type: 'get',
						success: function (response) {
							_this.setPlayoffsItems(response.playoffsItems);
							_this.setPlayoffsGames(response.playoffsGames);
							_this.setPlayoffs(response.playoffs);
						},
						complete: function (response) {

						}
					});
				},
				showAddPlayoffPopup: function () {
					this.$refs.modal.show('playoffModal', {playoff: {
						id: null,
						season: null,
						league: null,
						start_at: undefined
					}});
				},
				showAddPlayoffItemPopup: function (data) {
					this.$refs.modal.show('playoffItemModal', data);
				},
				handle: function (data) {
					this.$emit(data.name, data.value);
				},
			},
			created: function () {
				var self = this;
				this
					.$on('deleted', function (seasonteam) {

					})
					.$on('gameSaved', function (game) {
						var exist = false;
						for (index in self.playoffsGames) {
							if (self.playoffsGames[index] && self.playoffsGames[index].id == game.id) {
								self.playoffsGames[index] = game;
								exist = true;
								self.$forceUpdate();
								return;
							}
						}
						if (!exist) {
							self.playoffsGames.push(game);
						}
					})
					.$on('show-playoff-item-popup', function (data) {
						this.showAddPlayoffItemPopup(data);
					})
					.$on('show-playoff-popup', function (data) {
						this.$refs.modal.show('playoffModal', data);
					})
					.$on('show-game-popup', function (data) {
						this.$refs.modal.show('gameModal', data, 'modal-lg');
					})
					.$on('new-playoff', function (data) {
						var exist = false;
						for (index in self.playoffs) {
							if (self.playoffs[index] && self.playoffs[index].id == data.playoff.id) {
								self.playoffs[index] = data.playoff;
								exist = true;
								this.$refs.modal.hide();
								self.$forceUpdate();
								return;
							}
						}
						if (!exist) {
							this.playoffs.push(data.playoff);
						}
						this.$refs.modal.hide();
					})
					.$on('new-playoff-item', function (data) {
						var exist = false;
						for (index in self.playoffsItems) {
							if (self.playoffsItems[index] && self.playoffsItems[index].id == data.item.id) {
								self.playoffsItems[index] = data.item;
								exist = true;
								this.$refs.modal.hide();
								self.$forceUpdate();
								return;
							}
						}
						if (!exist) {
							this.playoffsItems.push(data.item);
						}
						this.$refs.modal.hide();
					})
					.$on('playoff-item-deleted', function (item) {
						this.setPlayoffsItems(this.playoffsItems.filter(function (pf) {
							return pf && pf.id !== item.id;
						}));
					})
					.$on('playoff-deleted', function (playoff) {
						this.setPlayoffs(this.playoffs.filter(function (pf) {
							return pf && pf.id !== playoff.id;
						}));
					})
				;
			},
			mounted: function () {
				this.load();
			}
		});
    </script>
{% endblock %}