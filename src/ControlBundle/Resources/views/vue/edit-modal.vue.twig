<template>
    {% block vue_template %}
{% verbatim %}
<div class="modal-content" id="modal-content" >
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span>
        </button>
        <h4 class="modal-title">{{ isNew ? 'Новая команда в сезоне' : 'Редактирование команды в сезоне' }}</h4>
    </div>
    <div class="modal-body">
        <div class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-3 control-label">Сезон</label>
                <div class="col-sm-9">
                    <a href="#" id="season-select" class="editable editable-click" data-type="typeahead">{{ season ? (season.year - 1) + '/' + season.year : 'Выбрать' }}</a>
                </div>
            </div>
        </div>
        <div class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-3 control-label">Команда</label>
                <div class="col-sm-9">
                    <a href="#" id="team-select" class="editable editable-click" data-type="typeahead">{{ team ? team.metadata.title : 'Выбрать' }}</a>
                </div>
            </div>
        </div>
        <div v-if="mode ==='season' && team" class="form-horizontal">
            <div class="panel panel-default">
                <div class="panel-body bg-info">
                    <div class="row">
                        <div class="col-md-9">
                            <div class="form-group">
                                <label for="title" class="col-sm-3 control-label">Название</label>
                                <div class="col-sm-9">
                                    <input class="form-control" id="title" placeholder="Название" v-model="team.metadata.title">
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="dt" class="col-sm-3 control-label">Дата основания</label>
                                <div class="col-sm-9">
                                    <input class="form-control" id="dt" placeholder="Дата основания" v-model="team.metadata.foundation_date">
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="col-sm-3 control-label">Лого</label>
                                <div class="col-sm-9">
                                    <input ref="avatarFiles" type="file" id="upload" v-on:change="uploadAvatar" class="form-control" value="" accept="image/*">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group" v-if="team.metadata.image">
                                <div class="col-sm-12">
                                    <img  class="img-responsive img-rounded" :src="'/avatar/'+team.metadata.image">
                                </div>
                            </div>
                        </div>
                    </div>


                </div>
            </div>
        </div>
        <div class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-3 control-label">Лига</label>
                <div class="col-sm-9">
                    <a href="#" id="league-select" class="editable editable-click" data-type="typeahead">{{ league ? league.metadata.title : 'Выбрать' }}</a>
                </div>
            </div>
        </div>
        <div class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-3 control-label">Тренер</label>
                <div class="col-sm-9">
                    <a href="#" id="coach-select" class="editable editable-click" data-type="typeahead">{{ coach ? coach.metadata.full_name : 'Выбрать' }}</a>
                </div>
            </div>
        </div>
        <div class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-3 control-label">Состав</label>
                <div class="col-sm-9">
                    <member v-for="member,key in members" @season-team-modal-bus="handle" :member="member" :key="key"></member>
                    <div class="row">
                        <div class="col-sm-12">
                            <button v-on:click="addMember" class="btn btn-sm btn-default btn-block">Добавить игрока</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="has-error" v-if="error">
            <div class="alert alert-danger text-center" role="alert">{{ error }}</div>
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
        <button type="button" v-on:click="save" :disabled="saveInProgress" class="btn btn-primary">Сохранить</button>
    </div>
</div>
        {% endverbatim %}
    {% endblock %}
</template>

<script>
	Vue.component('editModal', {
		template: '{{ block('vue_template')|escape('js') }}',
		props: ['props'],
		data: function () {
			return {
				error: null,
				id: null,
				team: null,
				coach: null,
				season: null,
				league: null,
				members: [],
				last_member_id: -1,
				saveInProgress: false,
                mode: 'season',
			}
		},
		computed:{
			isNew: function () {
				if (!this.id) {
					return true;
				}
				return false;
			},
			saveData: function () {

				var
					_this = this,
					members = [];
				for (i in _this.members) {
					if (!_this.members[i].player) {
						continue;
					}
					members.push({
						player_id: _this.members[i].player.id,
						type: _this.members[i].type,
					});
				}
				return {
					seasonteam: {
						id: _this.id,
						team: _this.team,
						coach: _this.coach,
						league: _this.league,
						season: _this.season,
						members: members
					}
				};
			}
		},
		created: function () {
			this.$on('member-default', function (member) {
				for (i in this.members) {
					if (this.members[i].id === member.id) {
						this.members[i].type = 'default';
					}
				}
			});
			this.$on('member-captain', function (member) {
				for (i in this.members) {
					if (this.members[i].type === 'captain') {
						this.members[i].type = 'default';
					}
					if (this.members[i].id === member.id) {
						this.members[i].type = 'captain';
					}
				}
			});
			this.$on('member-assistant', function (member) {
				var assistantCount = 0;
				for (i in this.members) {
					if (this.members[i].type === 'assistant') {
						assistantCount++;
						if (assistantCount >= 3) {
							this.members[i].type = 'default';
						}
					}
					if (this.members[i].id === member.id) {
						this.members[i].type = 'assistant';
					}
				}
			});
			this.$on('member-remove', function (member) {
				this.members = this.members.filter(function (v) {
					return member.id != v.id;
				});
			});
			this.$on('member-add', function (member) {
				this.members.push({
					id: this.last_member_id,
					player: null,
					type: 'default'
				});
				this.last_member_id -= 1;
			});
		},
		methods: {
			handle: function (data) {
				this.$emit(data.name, data.value);
			},
			addMember: function () {
				this.$emit('member-add', {});
			},
			uploadAvatar: function () {
				var $this = this;
				var files = this.$refs.avatarFiles.files;
				var formData = new FormData();

				formData.append("file", files[0]);
				var request = new XMLHttpRequest();
				request.onreadystatechange = function() {//Call a function when the state changes.
					if(request.readyState == 4 && request.status == 200) {
						$this.changeAvatar(JSON.parse(request.responseText));
					}
				};
				request.open("POST", "/control/avatar/upload");
				request.send(formData);
			},
			changeAvatar: function (url) {
				if (!this.team) {
					this.team = {};
				}
				if (!this.team.metadata) {
					this.team.metadata = {};
				}
				this.team.metadata.image = url;
				this.$forceUpdate();
			},
			updateTeamInfo: function (team) {
				this.team = team;
			},
			updateCoach: function (coach) {
				this.coach = coach;
			},
			updateLeague: function (league) {
				this.league = league;
			},
			updateSeason: function (season) {
				this.season = season;
			},
			save: function () {
				const self = this;
				self.saveInProgress = true;
				$.ajax({
					url: '/control/seasonteam/save',
					data: self.saveData,
					type: 'post',
					success: function (response) {
						self.$emit('bus', {name: 'seasonteam-changed', value: response});
						self.$parent.hide();
					},
					error: function (jqXHR) {
						self.error = 'Ошибка сервера';
					},
					complete: function () {
						self.saveInProgress = false;
					}
				});
			},
			loadMembers: function () {
				var _this = this;
				$.ajax({
					url: '/control/seasonteam/members/' + _this.id,
					type: 'get',
					success: function (response) {
						_this.members = response;
					},
					error: function (jqXHR) {
						_this.error = 'Ошибка сервера';
					}
				});
			},
			init: function () {
				var $this = this;
				const data = $this.props;
				$this.members = [];

				if (data) {
					$this.id = data.seasonTeam.id ? data.seasonTeam.id : null;
					$this.coach = data.seasonTeam.coach ? data.seasonTeam.coach : null;
					$this.team = data.seasonTeam.team ? data.seasonTeam.team : data.team;
					$this.season = data.seasonTeam.season ? data.seasonTeam.season : data.season;
					$this.league = data.seasonTeam.league ? data.seasonTeam.league : data.league;
					$this.id && $this.loadMembers();
				}

				if (data.team) {
					this.mode = 'team';
				} else if (data.season) {
					this.mode = 'season';
				} else if (data.league) {
					this.mode = 'league';
				}

				$('#season-select').editable({
					mode: 'inline',
					unsavedclass: '',
					showbuttons: false,
					value: '',
					typeahead: {
						autoSelect: false,
						source: function (query, process) {
							$.ajax({
								url: '/control/typeahead?season=' + query,
								success: function (response) {
									process(response);
								}
							});
						},
						onSelect: function (item) {
							$this.updateSeason(item.season);
						}
					},
					display: function (value) {
						return;
					},
					title: 'Выберите сезон'
				});

				$('#team-select').editable({
					mode: 'inline',
					unsavedclass: '',
					showbuttons: false,
					value: '',
					typeahead: {
						autoSelect: false,
						source: function (query, process) {
							$.ajax({
								url: '/control/typeahead?team=' + query,
								success: function (response) {
									process(response);
								}
							});
						},
						onSelect: function (item) {
							$this.updateTeamInfo(item.team);
						}
					},
					display: function (value) {
						if (value !== '' && (!$this.team || $this.team.metadata.title !== value)) {
							$this.updateTeamInfo({metadata: {title: value}});
						}
					},
					title: 'Выберите команду'
				});

				$('#coach-select').editable({
					mode: 'inline',
					unsavedclass: '',
					showbuttons: false,
					value: '',
					typeahead: {
						autoSelect: false,
						source: function (query, process) {
							$.ajax({
								url: '/control/typeahead?coach=' + query,
								success: function (response) {
									process(response);
								}
							});
						},
						onSelect: function (item) {
							$this.updateCoach(item.coach);
						}
					},
					display: function () {
						return;
					},
					title: 'Выберите тренера'
				});

				$('#league-select').editable({
					mode: 'inline',
					unsavedclass: '',
					showbuttons: false,
					value: '',
					typeahead: {
						autoSelect: false,
						source: function (query, process) {
							$.ajax({
								url: '/control/typeahead?league=' + query,
								success: function (response) {
									process(response);
								}
							});
						},
						onSelect: function (item) {
							$this.updateLeague(item.league);
						}
					},
					display: function (value) {
						if (value !== '' && (!$this.league || $this.league.metadata.title !== value)) {
							$this.updateLeague({metadata: {title: value}});
						}
					},
					title: 'Выберите лигу'
				});

				$('#'+this.mode+'-select').editable('disable');

				if ($this.id) {
					$('#team-select').editable('disable');
					$('#season-select').editable('disable');
					$('#league-select').editable('disable');
				}
			}
		},
		mounted: function () {
			this.init();
		}
	});
</script>