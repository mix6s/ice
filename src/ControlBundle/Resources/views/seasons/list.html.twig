{% extends '@Control/layout.html.twig' %}

{% block body %}
	<div class="container" id="app">
		<div class="row mb-10">
			<div class="col-md-12">
				<button v-on:click="showAddSeasonPopup" class="btn btn-primary">Добавить сезон</button>
			</div>
		</div>
		<div class="row">
			<div v-for="season in sortedSeasons" class="col-xs-12 col-sm-12 col-md-6">
				<season @bus="handle" :season="season" :seasonteams="getSeasonTeams(season)" :current-season-id="currentSeasonId"></season>
			</div>
		</div>
		<modal ref="modal" @bus="handle"></modal>
	</div>
{% endblock %}
{% block ccs %}
    {{ parent() }}
    <link href="{{ asset('backend/css/dropzone.css') }}" rel="stylesheet">
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('backend/js/dropzone.js') }}"></script>
    {{ include('@Control/vue/modal-layout.vue.twig') }}
    {{ include('@Control/vue/edit-modal.vue.twig') }}
    {{ include('@Control/vue/member.vue.twig') }}
    {{ include('@Control/seasons/vue/season.vue.twig') }}
    {{ include('@Control/seasons/vue/season-modal.vue.twig') }}
    <script>
		var app = new Vue({
			el: '#app',
			data: {
				currentSeasonId: 0,
				seasons: [],
				seasonteams: [],
				teams: [],
				leagues: []
			},
			computed: {
				sortedSeasons: function () {
					return this.seasons.sort(function(a, b) {
						return parseInt(b.year) - parseInt(a.year);
					});
				}
			},
			methods: {
				getSeasonTeams: function (season) {
					var seasonteams = [];
					for (var i in this.seasonteams) {
						if (this.seasonteams[i] && this.seasonteams[i].season.id === season.id) {
							seasonteams.push(this.seasonteams[i]);
						}
					}
					return seasonteams;
				},
				showAddSeasonPopup: function (season) {
					this.$refs.modal.show('seasonModal', season);
				},
				showAddSeasonTeamPopup: function (data) {
					this.$refs.modal.show('editModal', data, 'modal-lg');
				},
				load: function () {
					const $this = this;
					$.ajax({
						url: '/control/seasons',
						type: 'get',
						success: function (response) {
							$this.seasons = response.seasons;
							$this.seasonteams = response.seasonteams;
							$this.currentSeasonId = response.currentSeasonId;
						},
						complete: function (response) {

						}
					});
				},
				handle: function (data) {
					this.$emit(data.name, data.value);
				}
			},
			created: function () {
				this.$on('season-deleted', function (season) {
					this.seasons = this.seasons.filter(function (st) {
						return st && st.id !== season.id;
					})
				});
				this.$on('seasonteam-deleted', function (seasonteam) {
					this.seasonteams = this.seasonteams.filter(function (st) {
						return st && st.id !== seasonteam.id;
					})
				});
				this.$on('current-season-update', function (id) {
					this.currentSeasonId = id;
				});
				this.$on('new-season', function (data) {
					this.seasons.push(data.season);
					for (i in data.seasonteams) {
						this.$emit('seasonteam-changed', {seasonteam: data.seasonteams[i]});
					}
					this.$refs.modal.hide();
				});
				this.$on('seasonteam-changed', function (response) {
					const seasonteam = response.seasonteam;
					var exist = false;
					for (index in this.seasonteams) {
						if (this.seasonteams[index] && this.seasonteams[index].id == seasonteam.id) {
							this.seasonteams[index] = seasonteam;
							exist = true;
							break;
						}
					}
					if (!exist) {
						this.seasonteams.push(seasonteam);
					}
					this.$forceUpdate();
				});
				this.$on('show-team-season-popup', function (data) {
					this.showAddSeasonTeamPopup(data);
				});
				this.$on('show-copy-season-popup', function (data) {
					this.showAddSeasonPopup(data);
				});
			},
			mounted: function () {
				this.load();
			}
		});
    </script>
{% endblock %}